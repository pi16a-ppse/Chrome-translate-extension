<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
    <info>
        <title>Документация к проекту Переводчик</title>
        <author>
            <personname>
                <firstname>Виктор</firstname>
                <surname>Горбань</surname>
            </personname>
        </author>
        <copyright>
            <year>2019</year>
            <holder>Виктор Горбань</holder>
        </copyright>
    </info>
    <chapter>
        <title>Описание проекта</title>
        <para>Данный проект является браузерным расширением-переводчиком страниц.</para>
        <para>Проект доступен в Интернете: https://github.com/pi16a-ppse/Translate-Opera-browser-extension</para>
        <section>
            <title>Особенности проекта</title>
            <para>Перевод выделенного текста на язык браузера;</para>
            <para>Возможность перевести страницу по нажатию всплывающей кнопки;</para>
            <para>Возможность перевода по двойному клику;</para>
            <para>Возможность перевода по горячей клавише (Ctrl+Enter);</para>
        </section>
    </chapter>
    <chapter>
        <title>Детали реализации</title>
        <para>Особенности реализации проекта в целом:</para>
        <section>
            <title>Алгоритм определения языка</title>
            <para>Ниже приведена функция, которая на вход принимает текст для перевода, отправляет его на страницу API Яндекс.Переводчика, обрабатывает ответ и возвращает текстовый код языка.</para>
            <example>
                <programlisting><![CDATA[
                /**
     * Определяет язык текста. Асинхронная функция. (возвращает promise)
     * @param text - текст, язык которого нужно узнать
     * @returns {Promise<json>} - json {code, lang}, обернутый в promise
     */
    detectLanguageFor: async function (text) {
        if (!isEncoded(text))
            text = encodeURI(text);
        // log("after encodeURI, the text is " + text);
        let key = this.key;
        let detectApi = "https://translate.yandex.net/api/v1.5/tr.json/detect";
        detectApi += "?";
        let url = `${detectApi}?&key=${key}`;
        let body = `text=${text}`;

        // json в формате {code, lang}
        let langData = await fetch(url, {
                method: 'POST',
                body: body,
                headers: new Headers({
                    'Content-Type': 'application/x-www-form-urlencoded'
                })

            })
            .then((response) => {
                return response.json();
            });
        let lang = langData.lang;

        return lang;
    }

                ]]></programlisting>
            </example>
        </section>
        <section>
            <title>Как происходит отправка запроса и получения ответа?</title>
            <para>С помощью функции fetch: отправка - через Post запрос с заданным телом. Обработка ответа - в callback-е.</para>
            <para>В листинге ниже я отправляю запрос на перевод и возвращаю переведенный текст.</para>
            <example>
                <programlisting><![CDATA[
    let langTo = navigator.language.substr(0, 2);
        let lang = langFrom + '-' + langTo;
        // log("translate lang is " + lang);
        let url = 'https://translate.yandex.net/api/v1.5/tr.json/translate?';
        url += 'key=' + this.key;
        url += '&lang=' + lang;

        let body = `text=${text}`;
        return fetch(url, {
                method: 'POST',
                body: body,
                headers: new Headers({
                    'Content-Type': 'application/x-www-form-urlencoded'
                })

            })
            .then(response =>
                response.json());

                ]]></programlisting>
            </example>
        </section>
        <section>
            <title>Какие библиотеки вы используете?</title>
            <para>Всего одну - JQuery. Также все дополнительные "удобные" методы описаны в файле js/convenient.js:</para>
            <para>Например, эта функция проверяет, что строка Url-Valid (т.е. Url-Encoded):</para>
            <example>
                <programlisting><![CDATA[
                /**
  * Проверяет, что строка уже закодирована (URL-valid)
  * @param str - строка для проверки
  * @returns {boolean}
  */
  function isEncoded(str) {
      return decodeURI(str) !== str;
  }

                ]]></programlisting>
            </example>
        </section>
    </chapter>
</article>